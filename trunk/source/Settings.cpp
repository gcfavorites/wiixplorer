/****************************************************************************
 * Settings Class
 * by dimok
 ***************************************************************************/
#include <ogcsys.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Settings.h"
#include "fileops.h"

#define CONFIGPATH      "sd:/config/"
#define CONFIGNAME      "WiiXplorer.cfg"

Settings::Settings()
{
    this->SetDefault();
}

Settings::~Settings()
{
}

void Settings::SetDefault()
{
    MountMethod = 0;
    CurrentUser = 0;
    AutoConnect = off;

    for(int i = 0; i < MAXSMBUSERS; i++) {
        strcpy(SMBUser[i].Host, "");
        strcpy(SMBUser[i].User, "");
        strcpy(SMBUser[i].Password, "");
        strcpy(SMBUser[i].SMBName, "");
	}
}

bool Settings::Save()
{
    char filepath[300];
    snprintf(filepath, sizeof(filepath), "%s%s", CONFIGPATH, CONFIGNAME);

    CreateSubfolder(CONFIGPATH);
    file = fopen(filepath, "w");

    if(!file) {
        fclose(file);
        return false;
    }

    fprintf(file, "# WiiXplorer Settingsfile\n");
	fprintf(file, "# Note: This file is automatically generated\n\n");
	fprintf(file, "#Main Settings\n\n");
	fprintf(file, "MountMethod = %d\n", MountMethod);
	fprintf(file, "CurrentUser = %d\n", CurrentUser);
	fprintf(file, "AutoConnect = %d\n", AutoConnect);

	fprintf(file, "\n#SMB Setup Information\n\n");
    for(int i = 0; i < MAXSMBUSERS; i++) {
        fprintf(file, "SMBUser[%d].Host = %s\n", i+1, SMBUser[i].Host);
        fprintf(file, "SMBUser[%d].User = %s\n", i+1, SMBUser[i].User);
        fprintf(file, "SMBUser[%d].Password = %s\n", i+1, SMBUser[i].Password);
        fprintf(file, "SMBUser[%d].SMBName = %s\n\n", i+1, SMBUser[i].SMBName);
	}

	fclose(file);

	return true;
}

bool Settings::Load()
{
	char line[300];
    char filepath[300];
    snprintf(filepath, sizeof(filepath), "%s%s", CONFIGPATH, CONFIGNAME);

	file = fopen(filepath, "r");
	if (!file) {
		return false;
	}
	while (fgets(line, sizeof(line), file)) {

		if (line[0] == '#') continue;

        this->ParseLine(line);
	}
	fclose(file);

	return true;

}

bool Settings::Reset()
{
    this->SetDefault();

    if(this->Save())
        return true;

	return false;
}

bool Settings::SetSetting(char *name, char *value)
{
    int i = 0;

    if (strcmp(name, "MountMethod") == 0) {
		if (sscanf(value, "%d", &i) == 1) {
			MountMethod = i;
		}
		return true;
	}
	else if (strcmp(name, "CurrentUser") == 0) {
		if (sscanf(value, "%d", &i) == 1) {
			CurrentUser = i;
		}
		return true;
	}
	else if (strcmp(name, "AutoConnect") == 0) {
		if (sscanf(value, "%d", &i) == 1) {
			AutoConnect = i;
		}
		return true;
	}
	else {
	    char temp[80];
	    int n = 0;

	    for(n = 0; n < MAXSMBUSERS; n++) {
	        sprintf(temp, "SMBUser[%d].Host", n+1);
            if (strcmp(name, temp) == 0) {
                strncpy(SMBUser[n].Host, value, sizeof(SMBUser[n].Host));
                return true;
            }
            sprintf(temp, "SMBUser[%d].User", n+1);
            if (strcmp(name, temp) == 0) {
                strncpy(SMBUser[n].User, value, sizeof(SMBUser[n].User));
                return true;
            }
            sprintf(temp, "SMBUser[%d].Password", n+1);
            if (strcmp(name, temp) == 0) {
                strncpy(SMBUser[n].Password, value, sizeof(SMBUser[n].Password));
                return true;
            }
            sprintf(temp, "SMBUser[%d].SMBName", n+1);
            if (strcmp(name, temp) == 0) {
                strncpy(SMBUser[n].SMBName, value, sizeof(SMBUser[n].SMBName));
                return true;
            }
	    }
	}

    return false;
}

void Settings::ParseLine(char *line)
{
    char temp[200], name[200], value[200];

    strncpy(temp, line, sizeof(temp));

    char * eq = strchr(temp, '=');

    if(!eq) return;

    *eq = 0;

    this->TrimLine(name, temp, sizeof(name));
    this->TrimLine(value, eq+1, sizeof(value));

	this->SetSetting(name, value);
}

void Settings::TrimLine(char *dest, char *src, int size)
{
	int len;
	while (*src == ' ') src++;
	len = strlen(src);
	while (len > 0 && strchr(" \r\n", src[len-1])) len--;
	if (len >= size) len = size-1;
	strncpy(dest, src, len);
	dest[len] = 0;
}
